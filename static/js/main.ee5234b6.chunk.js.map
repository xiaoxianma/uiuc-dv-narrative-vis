{"version":3,"sources":["data/2019.csv","data/2019_region.csv","components/Introduction.js","components/CountryRank.js","components/DataChart.js","components/WorldHappiness.js","components/Resources.js","components/Title.js","components/Region.js","components/Main.js","index.js"],"names":["module","exports","useStyle","makeStyles","theme","content","color","fontSize","Introduction","classes","className","Grid","container","item","xs","align","Link","href","Button","variant","plot","leftMargin","spacing","CountryRank","props","ref","useRef","useState","data","setData","useEffect","tmpData","reportData","slice","row","push","name","gdp","parseFloat","social","health","freedom","generosity","perceptions","d3","current","append","attr","layout","width","height","margin","top","right","left","bottom","dataKey","type","interval","angle","tick","fill","dy","dx","verticalAlign","formatter","value","entry","style","stackId","animationBegin","animationDuration","x","y","note","subject","chartLabel","stroke","fontWeight","countryLabel","hint","backgroundColor","DataChart","yDomain","xDomain","line","ticks","text","chartXAxis","xPercent","yPercent","score","selectedCountry","animation","opacity","lineData","strokeWidth","chartData","sizeType","colorType","onValueMouseOver","event","setSelectedCountry","country","size","setChartData","setScore","setAttr","toFixed","onValueMouseOut","datapoint","title","marginTop","colorScale","maxWidth","root","flexGrow","chart","btnGroup","textAlign","btn","cyan","activeBtn","colorRange","domain","range","WorldHappiness","tooltipContent","setTooltipContent","gdpPerCapita","setGdpPerCapita","socialSupport","setSocialSupport","healthy","setHealthy","setFreedom","setGenerosity","setPerceptions","charData","setLineData","setChartXAxis","isGdpActive","setIsGdpActive","isSocialActive","setIsSocialActive","isHealthyActive","setIsHealthyActive","isFreedomActive","setIsFreedomActive","isGenerosityActive","setIsGenerosityActive","isPerceptionActive","setIsPerceptionActive","tmpGdp","tmpSocial","tmpHealthy","tmpFreedom","tmpGenerosity","tmpPerceptions","handleBtnClick","currentTarget","id","data-tip","projectionConfig","rotate","scale","length","geography","geographies","map","geo","d","find","s","properties","NAME","key","rsmKey","onMouseEnter","onMouseLeave","default","outline","hover","pressed","colorscale","onClick","link","textDecoration","Title","React","Component","Region","offset","position","label","Main","setReportData","reportRegionData","setReportRegionData","csv","dataset","then","rows","regionDataSet","Map","hasOwnProperty","get","set","tmpRegionData","entries","scores","reduce","sum","sort","a","b","console","log","anchors","FullpageWrapper","navigation","navigationTooltips","sectionsColor","onLeave","origin","destination","direction","render","state","fullpageApi","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.ee5234b6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/2019.de665a57.csv\";","module.exports = __webpack_public_path__ + \"static/media/2019_region.39427317.csv\";","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Link from \"@material-ui/core/Link\";\n\n\nconst useStyle = makeStyles(theme => ({\n    content: {\n        color: 'white',\n        fontSize: 20,\n    }\n}));\n\nexport default function Introduction() {\n    const classes = useStyle();\n    return (\n        <div className=\"section\">\n            <Grid container>\n                <Grid item xs={3}/>\n                <Grid item xs={6}>\n                    <div><h3>Introduction</h3></div>\n                    <div className={classes.content} align=\"left\">\n                        In this project, we perform a detailed data analysis on the World Happiness Report of 2019.\n                        The World Happiness Report is a landmark survey of the state of global happiness. The report\n                        reviews the state of happiness in the world and shows how the science of happiness explains\n                        personal\n                        and national variations in happiness. It is one approach to measuring humanities well-being. There\n                        are six factors are selected due to their high contribution to making life evaluation higher in each\n                        country including economic production, social support, life expectancy, freedom, absence of corruption,\n                        and generosity. They have no impact on the total score reported for each country, but they do\n                        explain why some countries rank higher than others.\n                    </div>\n                    <Link href=\"#world-happiness\"><Button variant=\"contained\" color=\"primary\">About the visualization</Button></Link>\n                </Grid>\n                <Grid item xs={3}/>\n            </Grid>\n        </div>\n    );\n}","import React, {useEffect, useRef, useState} from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Bar, BarChart, Legend, Tooltip, XAxis, YAxis} from \"recharts\";\nimport {AnnotationLabel, AnnotationCalloutRect} from \"react-annotation\";\nimport * as d3 from \"d3\";\n\n\nconst useStyle = makeStyles(theme => ({\n    plot: {\n        leftMargin: theme.spacing(10)\n    }\n}));\n\nexport default function CountryRank(props) {\n    const classes = useStyle();\n    const ref = useRef();\n    const [data, setData] = useState([]);\n\n    useEffect(() => {\n        const tmpData = [];\n        for (const row of props.reportData.slice(0, 20)) {\n            tmpData.push({\n                name: row['country'],\n                gdp: parseFloat(row['gdp-per-capita']),\n                social: row['social-support'],\n                health: row['healthy-life-expectancy'],\n                freedom: row['freedom'],\n                generosity: row['generosity'],\n                perceptions: row['perceptions-of-corruption']\n            });\n        }\n        setData(tmpData);\n    }, [props.reportData]);\n\n    useEffect(() => {\n        const svgElement = d3.select(ref.current);\n        svgElement.append(\"circle\")\n            .attr(\"cx\", 150)\n            .attr(\"cy\", 70)\n            .attr(\"r\", 50)\n    }, [])\n\n    const legendFormatter = (value, entry) => {\n        const {color} = entry;\n        return <span style={{color}}>{value}</span>\n    };\n\n    return (\n        <div className=\"section\">\n            <Grid container>\n                <Grid item xs={2}/>\n                <Grid item xs={8}>\n                    <h4>Top 20 Happiest Countries</h4>\n                    <BarChart layout=\"horizontal\" width={1600} height={800} data={data}\n                              margin={{top: 20, right: 30, left: 20, bottom: 100}}>\n                        <XAxis dataKey=\"name\" type=\"category\" interval={0} angle={-30}\n                               tick={{fill: 'white', fontSize: 16, dy: 35, dx: -10}}/>\n                        <YAxis/>\n                        <Tooltip/>\n                        <Legend verticalAlign=\"top\" formatter={legendFormatter}/>\n                        <Bar dataKey=\"gdp\" stackId=\"a\" fill=\"#8884d8\" animationBegin={100} animationDuration={2000}/>\n                        <Bar dataKey=\"social\" stackId=\"a\" fill=\"#f06292\" animationBegin={100} animationDuration={2000}/>\n                        <Bar dataKey=\"health\" stackId=\"a\" fill=\"#ba68c8\" animationBegin={100} animationDuration={2000}/>\n                        <Bar dataKey=\"freedom\" stackId=\"a\" fill=\"#4dd0e1\" animationBegin={100}\n                             animationDuration={2000}/>\n                        <Bar dataKey=\"generosity\" stackId=\"a\" fill=\"#ffd54f\" animationBegin={100}\n                             animationDuration={2000}/>\n                        <Bar dataKey=\"perceptions\" stackId=\"a\" fill=\"#81c784\" animationBegin={100}\n                             animationDuration={2000}/>\n                        <svg width={1600} height={800}>\n                            <AnnotationLabel\n                                x={938}\n                                y={320}\n                                dy={-100}\n                                dx={100}\n                                color={\"#ff8a65\"}\n                                note={{\n                                    \"label\": \"Costa Rica tops the happiness index despite low gdp\",\n                                    \"align\": \"left\",\n                                    \"orientation\": \"topBottom\",\n                                    \"bgPadding\": 10,\n                                    \"padding\": 15,\n                                    \"titleColor\": \"#ffe0b2\"\n                                }}\n                            />\n\n                            <AnnotationCalloutRect\n                                x={350}\n                                y={370}\n                                dy={-120}\n                                dx={-120}\n                                color={\"white\"}\n                                note={{\n                                    \"label\":\"GDP, Social Support and Healthy life expectancy are the three biggest factors\",\n                                    \"lineType\":\"horizontal\",\n                                    \"padding\": 10,\n                                }}\n                                subject={{\"width\":400,\"height\":290}}\n                            />\n                        </svg>\n                    </BarChart>\n                </Grid>\n                <Grid item xs={2}/>\n            </Grid>\n\n        </div>\n    );\n}","import React from \"react\";\nimport {\n    ChartLabel,\n    HorizontalGridLines,\n    LineSeries,\n    MarkSeries,\n    VerticalGridLines,\n    XAxis,\n    XYPlot,\n    YAxis\n} from \"react-vis\";\nimport {Annotation, ConnectorLine, Note} from \"react-annotation\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\n\nconst useStyle = makeStyles(theme => ({\n    chartLabel: {\n        stroke: \"white\",\n        fill: 'white',\n        fontWeight: 400,\n    },\n    countryLabel: {\n        fontSize: 30,\n        stroke: \"#eeeeee\",\n        fill: '#eeeeee'\n    },\n    hint: {\n        fontSize: 14,\n        value: {\n            color: \"white\"\n        },\n        backgroundColor: \"grey\"\n    }\n}));\n\nexport default function DataChart(props) {\n    const classes = useStyle();\n\n    const handleMounseEnter = (event) => {\n        props.setSelectedCountry(event.country);\n        const tmpData = [];\n        for (const row of props.chartData) {\n            if (row['country'] === event.country) {\n                row.size = 10;\n                row.color = '#ffb74d';\n            } else {\n                row.size = 5;\n                row.color = '#12939A';\n            }\n            tmpData.push(row);\n        }\n        props.setChartData(tmpData);\n        props.setScore(`(${event.y})`);\n        props.setAttr(`- ${event.x.toFixed(2)}`);\n    };\n\n    const handleMouseOut = (datapoint, event) => {\n        props.setSelectedCountry(\"\");\n        const tmpData = [];\n        for (const row of props.chartData) {\n            row.size = 5;\n            row.color = '#12939A';\n            tmpData.push(row);\n        }\n        props.setChartData(tmpData);\n        props.setScore(\"\");\n        props.setAttr(\"\");\n    };\n\n    return (\n        <XYPlot width={800} height={800} yDomain={[0, 8]} xDomain={[0, 2]}>\n            <VerticalGridLines/>\n            <HorizontalGridLines/>\n            <XAxis style={{\n                line: {stroke: 'white'},\n                ticks: {stroke: 'white'},\n                text: {stroke: 'none', fill: 'white', fontWeight: 400},\n            }}/>\n            <YAxis style={{\n                line: {stroke: 'white'},\n                ticks: {stroke: 'white'},\n                text: {stroke: 'none', fill: 'white', fontWeight: 400},\n            }}/>\n            <ChartLabel text={`${props.chartXAxis} ${props.attr}`} xPercent={0.8} yPercent={0.875}\n                        className={classes.chartLabel}/>\n            <ChartLabel text=\"Happiness Score\" xPercent={0.07} className={classes.chartLabel}/>\n            <ChartLabel text={props.score} xPercent={0.1} yPercent={0.03} className={classes.chartLabel}/>\n            <ChartLabel text={props.selectedCountry} xPercent={0.1} yPercent={0.85} className={classes.countryLabel}/>\n            <LineSeries animation opacity={0.8} data={props.lineData} strokeWidth={8} color='#bcaaa4'/>\n            <MarkSeries data={props.chartData} sizeType=\"literal\" colorType=\"literal\" onValueMouseOver={handleMounseEnter} onValueMouseOut={handleMouseOut}/>\n        </XYPlot>\n    )\n}","import React, {useEffect, useState} from 'react';\nimport * as d3 from \"d3\";\nimport {ComposableMap, Geographies, Geography, Graticule, Sphere, ZoomableGroup} from \"react-simple-maps\";\nimport {Colorscale} from \"react-colorscales\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport ReactTooltip from \"react-tooltip\";\nimport Grid from \"@material-ui/core/Grid\";\nimport DataChart from \"./DataChart\";\nimport Button from \"@material-ui/core/Button\";\nimport {cyan} from \"@material-ui/core/colors\";\n\nconst useStyle = makeStyles(theme => ({\n    title: {\n        marginTop: theme.spacing(8),\n        fontSize: 48,\n        color: \"white\"\n    },\n    colorScale: {\n        maxWidth: \"30%\",\n        margin: \"auto\"\n    },\n    root: {\n        flexGrow: 1\n    },\n    chart: {\n        margin: theme.spacing(4)\n    },\n    btnGroup: {\n        '& > *': {\n            margin: theme.spacing(1),\n        },\n        textAlign: \"left\",\n    },\n    btn: {\n        backgroundColor: 'white',\n        '&:hover': {\n            backgroundColor: cyan[100]\n        },\n        '&:active': {\n            backgroundColor: cyan[300]\n        }\n    },\n    activeBtn: {\n        backgroundColor: cyan[300],\n        '&:hover': {\n            backgroundColor: cyan[100]\n        },\n        '&:active': {\n            backgroundColor: cyan[300]\n        },\n        '&:focus': {\n            backgroundColor: cyan[300]\n        }\n    }\n}));\nconst geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\nconst colorRange = ['#d53e4f', '#f46d43', '#fdae61', '#abdda4', '#66c2a5', '#3288bd'];\nconst colorScale = d3.scaleLinear()\n    .domain([2.6, 3.8, 4.8, 5.8, 6.8, 7.8])\n    .range(colorRange);\n\nexport default function WorldHappiness(props) {\n    const classes = useStyle();\n    const [score, setScore] = useState(\"\");\n    const [attr, setAttr] = useState(\"\");\n    const [tooltipContent, setTooltipContent] = useState(\"\");\n    const [gdpPerCapita, setGdpPerCapita] = useState([]);\n    const [socialSupport, setSocialSupport] = useState([]);\n    const [healthy, setHealthy] = useState([]);\n    const [freedom, setFreedom] = useState([]);\n    const [generosity, setGenerosity] = useState([]);\n    const [perceptions, setPerceptions] = useState([]);\n    const [charData, setChartData] = useState([]);\n    const [lineData, setLineData] = useState([]);\n    const [chartXAxis, setChartXAxis] = useState(\"gdp per capita\");\n    const [isGdpActive, setIsGdpActive] = useState(true);\n    const [isSocialActive, setIsSocialActive] = useState(false);\n    const [isHealthyActive, setIsHealthyActive] = useState(false);\n    const [isFreedomActive, setIsFreedomActive] = useState(false);\n    const [isGenerosityActive, setIsGenerosityActive] = useState(false);\n    const [isPerceptionActive, setIsPerceptionActive] = useState(false);\n    const [selectedCountry, setSelectedCountry] = useState(\"\");\n\n    useEffect(() => {\n        const tmpGdp = [];\n        const tmpSocial = [];\n        const tmpHealthy = [];\n        const tmpFreedom = [];\n        const tmpGenerosity = [];\n        const tmpPerceptions = [];\n        const size = 5;\n        const color = '#12939A';\n        for (const row of props.reportData) {\n            tmpGdp.push({x: row['gdp-per-capita'] * 2 / 1.69, y: row['score'], country: row['country'], size, color});\n            tmpSocial.push({\n                x: row['social-support'] * 2 / 1.63,\n                y: row['score'],\n                country: row['country'],\n                size,\n                color\n            });\n            tmpHealthy.push({\n                x: row['healthy-life-expectancy'] * 2 / 1.15,\n                y: row['score'],\n                country: row['country'],\n                size,\n                color\n            });\n            tmpFreedom.push({x: row['freedom'] * 2 / 0.61, y: row['score'], country: row['country'], size, color});\n            tmpGenerosity.push({x: row['generosity'] * 2 / 0.6, y: row['score'], country: row['country'], size, color});\n            tmpPerceptions.push({\n                x: row['perceptions-of-corruption'] * 2 / 0.46,\n                y: row['score'],\n                country: row['country'],\n                size,\n                color\n            });\n        }\n        setGdpPerCapita(tmpGdp);\n        setSocialSupport(tmpSocial);\n        setHealthy(tmpHealthy);\n        setFreedom(tmpFreedom);\n        setGenerosity(tmpGenerosity);\n        setPerceptions(tmpPerceptions);\n        // initial data\n        setChartData(tmpGdp);\n        setLineData([{x: 0.05, y: 3.5}, {x: 2, y: 6.6}])\n    }, [props.reportData]);\n\n    useEffect(() => {\n        const tmpData = [];\n        for (const row of charData) {\n            if (row['country'] === selectedCountry) {\n                row.size = 10;\n                row.color = '#ffb74d';\n                setScore(`(${row.y})`);\n                setAttr(`- ${row.x.toFixed(2)}`);\n            } else {\n                row.size = 5;\n                row.color = '#12939A';\n            }\n            tmpData.push(row);\n        }\n        setChartData(tmpData);\n    }, [selectedCountry]);\n\n    const handleBtnClick = (event) => {\n        const value = event.currentTarget.id;\n        if (value === \"gdp\") {\n            setIsGdpActive(true);\n            setChartData(gdpPerCapita);\n            setChartXAxis(\"gdp per capita\");\n            setLineData([{x: 0.05, y: 3.5}, {x: 2, y: 6.6}]);\n        } else {\n            setIsGdpActive(false);\n        }\n        if (value === \"social\") {\n            setIsSocialActive(true);\n            setChartData(socialSupport);\n            setChartXAxis(\"social support\");\n            setLineData([{x: 0.05, y: 3.0}, {x: 2, y: 6.0}]);\n        } else {\n            setIsSocialActive(false);\n        }\n        if (value === \"healthy\") {\n            setIsHealthyActive(true);\n            setChartData(healthy);\n            setChartXAxis(\"healthy\");\n            setLineData([{x: 0.05, y: 2.7}, {x: 2, y: 6.5}]);\n        } else {\n            setIsHealthyActive(false);\n        }\n        if (value === \"freedom\") {\n            setIsFreedomActive(true);\n            setChartData(freedom);\n            setChartXAxis(\"freedom\");\n            setLineData([{x: 0.05, y: 3.3}, {x: 2, y: 6.0}]);\n        } else {\n            setIsFreedomActive(false);\n        }\n        if (value === \"generosity\") {\n            setIsGenerosityActive(true);\n            setChartData(generosity);\n            setChartXAxis(\"generosity\");\n            setLineData([{x: 0.05, y: 4.5}, {x: 2, y: 6.5}]);\n        } else {\n            setIsGenerosityActive(false);\n        }\n        if (value === \"perception\") {\n            setIsPerceptionActive(true);\n            setChartData(perceptions);\n            setChartXAxis(\"perception\");\n            setLineData([{x: 0.05, y: 4.5}, {x: 2, y: 7.0}]);\n        } else {\n            setIsPerceptionActive(false);\n        }\n    };\n\n    return (\n        <div className=\"section\">\n            <div className={classes.root}>\n                <div className={classes.title}>World Happiness</div>\n                <Grid container>\n                    <Grid item xs={6}>\n                        <ComposableMap\n                            data-tip=\"\"\n                            projectionConfig={{\n                                rotate: [-10, 0, 0],\n                                scale: 120\n                            }}\n                        >\n                            <ZoomableGroup>\n                                <Sphere stroke=\"#E4E5E6\" strokeWidth={0.2}/>\n                                <Graticule stroke=\"#E4E5E6\" strokeWidth={0.2}/>\n                                {props.reportData.length === 156 && (\n                                    <Geographies geography={geoUrl}>\n                                        {({geographies}) =>\n                                            geographies.map(geo => {\n                                                const d = props.reportData.find(s => s.country === geo.properties.NAME);\n                                                return (\n                                                    <Geography\n                                                        key={geo.rsmKey}\n                                                        geography={geo}\n                                                        fill={d ? colorScale(d[\"score\"]) : \"white\"}\n                                                        onMouseEnter={() => {\n                                                            setTooltipContent(`${geo.properties.NAME} - score: ${d ? d[\"score\"] : \"N/A\"}`)\n                                                            setSelectedCountry(d ? d['country'] : \"\");\n                                                        }}\n                                                        onMouseLeave={() => {\n                                                            setTooltipContent(\"\");\n                                                            setSelectedCountry(\"\");\n                                                            setAttr(\"\");\n                                                            setScore(\"\");\n                                                        }}\n                                                        style={{\n                                                            default: {\n                                                                outline: \"none\"\n                                                            },\n                                                            hover: {\n                                                                fill: d ? colorScale(d[\"score\"] - 0.2) : \"white\",\n                                                                outline: \"none\"\n                                                            },\n                                                            pressed: {\n                                                                fill: d ? colorScale(d[\"score\"] - 0.2) : \"white\",\n                                                                outline: \"none\"\n                                                            }\n                                                        }}\n                                                    />\n                                                );\n                                            })\n                                        }\n                                    </Geographies>\n                                )}\n                            </ZoomableGroup>\n                        </ComposableMap>\n                        <div className={classes.colorScale}>\n                            <p>{\"Low <- Happiness Index -> High\"}</p>\n                            <Colorscale colorscale={colorRange}/>\n                        </div>\n                        <ReactTooltip>{tooltipContent}</ReactTooltip>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <div className={classes.chart}>\n                            <DataChart\n                                attr={attr}\n                                score={score}\n                                setScore={setScore}\n                                setAttr={setAttr}\n                                lineData={lineData}\n                                chartData={charData}\n                                setChartData={setChartData}\n                                chartXAxis={chartXAxis}\n                                selectedCountry={selectedCountry}\n                                setSelectedCountry={setSelectedCountry}\n                            />\n                        </div>\n                        <div className={classes.btnGroup}>\n                            <Button variant=\"contained\" className={isGdpActive ? classes.activeBtn : classes.btn}\n                                    onClick={handleBtnClick} id=\"gdp\">GDP Per Capita</Button>\n                            <Button variant=\"contained\" className={isSocialActive ? classes.activeBtn : classes.btn}\n                                    onClick={handleBtnClick} id=\"social\">Social Support</Button>\n                            <Button variant=\"contained\" className={isHealthyActive ? classes.activeBtn : classes.btn}\n                                    onClick={handleBtnClick} id=\"healthy\">Healthy</Button>\n                            <Button variant=\"contained\" className={isFreedomActive ? classes.activeBtn : classes.btn}\n                                    onClick={handleBtnClick} id=\"freedom\">Freedom</Button>\n                            <Button variant=\"contained\" className={isGenerosityActive ? classes.activeBtn : classes.btn}\n                                    onClick={handleBtnClick} id=\"generosity\">Generosity</Button>\n                            <Button variant=\"contained\" className={isPerceptionActive ? classes.activeBtn : classes.btn}\n                                    onClick={handleBtnClick} id=\"perception\">Perceptions</Button>\n                        </div>\n                    </Grid>\n                </Grid>\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport {makeStyles} from \"@material-ui/core/styles\";\n\n\nconst useStyle = makeStyles(theme => ({\n    content: {\n        margin: theme.spacing(5),\n    },\n    link: {\n        color: 'green',\n        fontSize: 24,\n        textDecoration: 'underline'\n    }\n}));\n\nexport default function Introduction() {\n    const classes = useStyle();\n    return (\n        <div className=\"section\">\n            <Grid container>\n                <Grid item xs={2}/>\n                <Grid item xs={8}>\n                    <h4>Resources</h4>\n                    <div className={classes.content}><a className={classes.link} href=\"https://worldhappiness.report/ed/2020/\">World Happiness Report 2019</a></div>\n                    <div className={classes.content}><a className={classes.link} href=\"https://kaggle.com/roshansharma/world-happiness-report\">Kaggle Dataset 2019</a></div>\n                    <div className={classes.content}><a className={classes.link} href=\"https://github.com/alvarotrigo/fullPage.js\">Fullpage.js for slide show</a></div>\n                </Grid>\n                <Grid item xs={2}/>\n            </Grid>\n        </div>\n    );\n}","import React from 'react';\n\nexport default class Title extends React.Component {\n    render() {\n        return (\n            <div className=\"section\">\n                <h3>Happiness Index Analysis</h3>\n                <p>Created by Weidong Sun for CS498 Data Visualization</p>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Bar, BarChart, Label, LabelList, Tooltip, XAxis, YAxis} from \"recharts\";\n\n\nconst useStyle = makeStyles(theme => ({\n}));\n\nexport default function Region(props) {\n    const classes = useStyle();\n\n    return (\n        <div className=\"section\">\n            <Grid container>\n                <Grid item xs={3}/>\n                <Grid item xs={6}>\n                    <h4>Happiness Index by Region</h4>\n                    <BarChart width={1200} height={600} data={props.data} margin={{top: 5, right: 30, left: 20, bottom: 5}}>\n                        <XAxis dataKey=\"name\" tick=\"\">\n                            <Label value=\"Region\" offset={0} position=\"insideBottom\" fill='white' fontSize={20}/>\n                        </XAxis>\n                        <YAxis label={{ value: 'Average Score', angle: -90, position: 'insideLeft', fill: 'white', fontSize: 20}} />\n                        <Tooltip/>\n                        <Bar dataKey=\"score\" fill=\"#7c4dff\">\n                            <LabelList dataKey=\"name\" position=\"top\" fill=\"#00e676\"/>\n                        </Bar>\n                    </BarChart>\n                </Grid>\n                <Grid item xs={3}/>\n            </Grid>\n        </div>\n    );\n}","import React, {useEffect, useState} from 'react';\nimport Introduction from \"./Introduction\";\nimport CountryRank from \"./CountryRank\";\nimport WorldHappiness from \"./WorldHappiness\";\nimport Resources from \"./Resources\";\nimport {csv} from \"d3-fetch\";\nimport dataset from \"../data/2019.csv\";\nimport regionDataSet from \"../data/2019_region.csv\";\nimport Title from \"./Title\";\nimport Region from \"./Region\";\n\nexport default function Main() {\n    const [reportData, setReportData] = useState([]);\n    const [reportRegionData, setReportRegionData] = useState([]);\n\n    useEffect(() => {\n        csv(dataset).then(rows => setReportData(rows));\n        csv(regionDataSet).then(rows => {\n            const tmpData = new Map();\n            for (const row of rows) {\n                if (tmpData.hasOwnProperty(row['Region'])) {\n                    tmpData.get(row['Region']).push(parseFloat(row['Happiness Score']));\n                } else {\n                    tmpData.set(row['Region'], [parseFloat(row['Happiness Score'])]);\n                }\n            }\n            const tmpRegionData = [];\n            for (const [key, scores] of tmpData.entries()) {\n                tmpRegionData.push({name: key, score: scores.reduce((sum, x) => sum + x)});\n            }\n            tmpRegionData.sort((a, b) => b.score - a.score);\n            setReportRegionData(tmpRegionData);\n        })\n    }, []);\n\n    console.log(reportData);\n    return (\n        <div>\n            <Title/>\n            <Introduction/>\n            <WorldHappiness reportData={reportData}/>\n            <CountryRank reportData={reportData}/>\n            <Region data={reportRegionData}/>\n            <Resources/>\n        </div>\n    );\n}","/* eslint-disable import/no-extraneous-dependencies */\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"fullpage.js/vendors/scrolloverflow\"; // Optional. When using scrollOverflow:true\nimport ReactFullpage from \"@fullpage/react-fullpage\";\nimport \"./index.css\";\nimport Main from \"./components/Main\";\n\n\nconst anchors = [\"title\", \"introduction\", \"world-happiness\", \"country-rank\", \"region\", \"resources\"];\n\nconst FullpageWrapper = () => (\n    <ReactFullpage\n        navigation\n        anchors={anchors}\n        navigationTooltips={anchors}\n        sectionsColor={[\"#282c34\", \"#282c34\", \"#282c34\", \"#282c34\", \"#282c34\", \"#282c34\"]}\n        onLeave={(origin, destination, direction) => {\n            console.log(\"onLeave event\", { origin, destination, direction });\n        }}\n        render={({ state, fullpageApi }) => {\n            console.log(\"render prop change\", state, fullpageApi); // eslint-disable-line no-console\n            return (\n                <Main/>\n            );\n        }}\n    />\n);\n\nReactDOM.render(<FullpageWrapper />, document.getElementById(\"root\"));\n"],"sourceRoot":""}